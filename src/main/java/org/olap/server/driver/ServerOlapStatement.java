package org.olap.server.driver;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;

import org.olap.server.processor.Query;
import org.olap4j.CellSet;
import org.olap4j.CellSetListener;
import org.olap4j.CellSetListener.Granularity;
import org.olap4j.OlapConnection;
import org.olap4j.OlapException;
import org.olap4j.OlapStatement;
import org.olap4j.mdx.SelectNode;
import org.olap4j.mdx.parser.MdxParser;

public class ServerOlapStatement implements OlapStatement {

	private int maxFieldSize, maxRows, queryTimeout, fetchDirection, fetchSize;
	private boolean closed, closeOnCompletion;
	private ServerConnection serverConnection;
	private MdxParser mdxParser;
	
	public ServerOlapStatement(ServerConnection serverConnection) {
		this.serverConnection = serverConnection;
		this.mdxParser = serverConnection.getParserFactory().createMdxParser(serverConnection);
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		throw new UnsupportedOperationException("Unsupported operation for OLAP statement");
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		throw new UnsupportedOperationException("Unsupported operation for OLAP statement");
	}

	@Override
	public void close() throws SQLException {
		this.closed = true;
	}


	@Override
	public int getMaxFieldSize() throws SQLException {
		return maxFieldSize;
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		this.maxFieldSize = max;
	}

	@Override
	public int getMaxRows() throws SQLException {
		return maxRows;
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		this.maxRows = max;
	}

	
	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return queryTimeout;
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		this.queryTimeout = seconds;
	}

	@Override
	public void cancel() throws SQLException {
	
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return null;
	}

	@Override
	public void clearWarnings() throws SQLException {
	}

	@Override
	public void setCursorName(String name) throws SQLException {
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		throw new UnsupportedOperationException("Unsupported operation for OLAP statement");
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		throw new UnsupportedOperationException("Unsupported operation for OLAP statement");
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return 0;
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return false;
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		this.fetchDirection  = direction;
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return fetchDirection;
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		this.fetchSize = rows;
	}

	@Override
	public int getFetchSize() throws SQLException {
		return fetchSize;
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return 0;
	}

	@Override
	public int getResultSetType() throws SQLException {
		return 0;
	}

	@Override
	public void addBatch(String sql) throws SQLException {
		throw new UnsupportedOperationException("Unsupported operation for OLAP statement");
	}

	@Override
	public void clearBatch() throws SQLException {

	}

	@Override
	public int[] executeBatch() throws SQLException {
		return null;
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return false;
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return null;
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
		throw new UnsupportedOperationException("Unsupported operation for OLAP statement");
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
		throw new UnsupportedOperationException("Unsupported operation for OLAP statement");
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
		throw new UnsupportedOperationException("Unsupported operation for OLAP statement");
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		throw new UnsupportedOperationException("Unsupported operation for OLAP statement");
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		throw new UnsupportedOperationException("Unsupported operation for OLAP statement");
	}

	@Override
	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		throw new UnsupportedOperationException("Unsupported operation for OLAP statement");
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return 0;
	}

	@Override
	public boolean isClosed() throws SQLException {
		return closed;
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return false;
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		this.closeOnCompletion = true;

	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return closeOnCompletion;
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return null;
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return false;
	}

	@Override
	public OlapConnection getConnection() throws SQLException {
		return serverConnection;
	}

	@Override
	public CellSet executeOlapQuery(String mdx) throws OlapException {
		SelectNode node = mdxParser.parseSelect(mdx);
		return executeOlapQuery(node);
	}

	@Override
	public CellSet executeOlapQuery(SelectNode selectNode) throws OlapException {
		Query query = new Query(this, selectNode);
		return query.execute();
	}

	@Override
	public void addListener(Granularity granularity, CellSetListener listener)
			throws OlapException {
		throw new UnsupportedOperationException("Unsupported operation for OLAP statement");
	}

	public ServerConnection getServerConnection() {
		return serverConnection;
	}

	public MdxParser getMdxParser() {
		return mdxParser;
	}

}
